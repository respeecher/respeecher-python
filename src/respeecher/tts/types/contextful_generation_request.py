# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from .streaming_generation_request import StreamingGenerationRequest


class ContextfulGenerationRequest(StreamingGenerationRequest):
    """
    Examples
    --------
    {
        "context_id": "abc",
        "transcript": "Hello, World!",
        "voice": {"id": "samantha"},
    }
    """

    context_id: str = pydantic.Field()
    """
    Use different context IDs for different generations over one WebSocket connection.
    """

    continue_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="continue")] = pydantic.Field(
        default=None
    )
    """
    Set to `true` for smooth prosody if text is streamed in chunks and this is not the last chunk.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
